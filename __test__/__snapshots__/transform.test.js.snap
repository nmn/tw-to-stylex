// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tailwind-to-stylex transforms command-menu.js 1`] = `
"'use client';

import * as _stylex from "@stylexjs/stylex";
import * as React from 'react';
import { useRouter } from 'next/navigation';
import { DialogProps } from '@radix-ui/react-alert-dialog';
import { CircleIcon, FileIcon, LaptopIcon, MoonIcon, SunIcon } from '@radix-ui/react-icons';
import { useTheme } from 'next-themes';
import { docsConfig } from '@/config/docs';
import { cn } from '@/lib/utils';
import { Button } from '@/registry/new-york/ui/button';
import { CommandDialog, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator } from '@/registry/new-york/ui/command';
export function CommandMenu({
  ...props
}: DialogProps) {
  const router = useRouter();
  const [open, setOpen] = React.useState(false);
  const {
    setTheme
  } = useTheme();
  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setOpen(open => !open);
      }
    };
    document.addEventListener('keydown', down);
    return () => document.removeEventListener('keydown', down);
  }, []);
  const runCommand = React.useCallback((command: () => unknown) => {
    setOpen(false);
    command();
  }, []);
  return <>
      <Button variant="outline" className={[_styles.$1]} onClick={() => setOpen(true)} {...props}>
        <span {..._stylex.props(_styles.$2)}>Search documentation...</span>
        <span {..._stylex.props(_styles.$3)}>Search...</span>
        <kbd {..._stylex.props(_styles.$4)}>
          <span {..._stylex.props(_styles.$5)}>âŒ˜</span>K
        </kbd>
      </Button>
      <CommandDialog open={open} onOpenChange={setOpen}>
        <CommandInput placeholder="Type a command or search..." />
        <CommandList>
          <CommandEmpty>No results found.</CommandEmpty>
          <CommandGroup heading="Links">
            {docsConfig.mainNav.filter(navitem => !navitem.external).map(navItem => <CommandItem key={navItem.href} value={navItem.title} onSelect={() => {
            runCommand(() => router.push((navItem.href as string)));
          }}>
                  <FileIcon className={_styles.$6} />
                  {navItem.title}
                </CommandItem>)}
          </CommandGroup>
          {docsConfig.sidebarNav.map(group => <CommandGroup key={group.title} heading={group.title}>
              {group.items.map(navItem => <CommandItem key={navItem.href} value={navItem.title} onSelect={() => {
            runCommand(() => router.push((navItem.href as string)));
          }}>
                  <div {..._stylex.props(_styles.$7)}>
                    <CircleIcon className={_styles.$8} />
                  </div>
                  {navItem.title}
                </CommandItem>)}
            </CommandGroup>)}
          <CommandSeparator />
          <CommandGroup heading="Theme">
            <CommandItem onSelect={() => runCommand(() => setTheme('light'))}>
              <SunIcon className={_styles.$6} />
              Light
            </CommandItem>
            <CommandItem onSelect={() => runCommand(() => setTheme('dark'))}>
              <MoonIcon className={_styles.$6} />
              Dark
            </CommandItem>
            <CommandItem onSelect={() => runCommand(() => setTheme('system'))}>
              <LaptopIcon className={_styles.$6} />
              System
            </CommandItem>
          </CommandGroup>
        </CommandList>
      </CommandDialog>
    </>;
}
const _styles = _stylex.create({
  $1: {
    position: "relative",
    justifyContent: "flex-start",
    width: {
      default: "100%",
      "@media (min-width: 768px)": "10rem",
      "@media (min-width: 1024px)": "16rem"
    },
    fontSize: "0.875rem",
    lineHeight: "1.25rem",
    paddingRight: {
      default: null,
      "@media (min-width: 640px)": "3rem"
    }
  },
  $2: {
    display: {
      default: "none",
      "@media (min-width: 1024px)": "inline-flex"
    }
  },
  $3: {
    display: {
      default: "inline-flex",
      "@media (min-width: 1024px)": "none"
    }
  },
  $4: {
    display: {
      default: "none",
      "@media (min-width: 640px)": "flex"
    },
    position: "absolute",
    top: "0.375rem",
    right: "0.375rem",
    paddingLeft: "0.375rem",
    paddingRight: "0.375rem",
    gap: "0.25rem",
    alignItems: "center",
    borderRadius: "0.25rem",
    borderWidth: "1px",
    height: "1.25rem",
    fontFamily: "Menlo, Monaco, Consolas, \\"Liberation Mono\\", \\"Courier New\\", monospace",
    fontWeight: "500",
    pointerEvents: "none",
    userSelect: "none",
    opacity: "1",
    color: "10px"
  },
  $5: {
    fontSize: "0.75rem",
    lineHeight: "1rem"
  },
  $6: {
    marginRight: "0.5rem",
    width: "1rem",
    height: "1rem"
  },
  $7: {
    display: "flex",
    marginRight: "0.5rem",
    justifyContent: "center",
    alignItems: "center",
    width: "1rem",
    height: "1rem"
  },
  $8: {
    width: "0.75rem",
    height: "0.75rem"
  }
});"
`;

exports[`tailwind-to-stylex transforms form.js 1`] = `
"import * as _stylex from "@stylexjs/stylex";
/**
 * v0 by Vercel.
 * @see https://v0.dev/t/WfjCkNNqj9B
 */
import { CardTitle, CardDescription, CardHeader, CardContent, CardFooter, Card } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import Link from "next/link";
export default function Component({
  xstyle
}) {
  return <Card>
      <CardHeader>
        <CardTitle>Uniswap Slot0 Information</CardTitle>
        <CardDescription>
          Detailed pool data for the selected Uniswap slot0.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div {..._stylex.props(_styles.$1, xstyle)}>
          <div {..._stylex.props(xstyle, _styles.$2)}>
            <Label htmlFor="sqrtPriceX96">Sqrt Price X96</Label>
            <Input disabled id="sqrtPriceX96" placeholder="Sqrt Price X96" />
          </div>
          <div {..._stylex.props(_styles.$2)}>
            <Label htmlFor="tick" className={_styles.$2}>
              Tick
            </Label>
            <Input disabled id="tick" placeholder="Tick" className={[_styles.$2, xstyle]} />
          </div>
          <div {..._stylex.props(_styles.$2)}>
            <Label htmlFor="observationIndex">Observation Index</Label>
            <Input disabled id="observationIndex" placeholder="Observation Index" />
          </div>
          <div {..._stylex.props(_styles.$2)}>
            <Label htmlFor="observationCardinality">
              Observation Cardinality
            </Label>
            <Input disabled id="observationCardinality" placeholder="Observation Cardinality" />
          </div>
          <div {..._stylex.props(_styles.$2)}>
            <Label htmlFor="observationCardinalityNext">
              Observation Cardinality Next
            </Label>
            <Input disabled id="observationCardinalityNext" placeholder="Observation Cardinality Next" />
          </div>
          <div {..._stylex.props(_styles.$2)}>
            <Label htmlFor="feeProtocol">Fee Protocol</Label>
            <Input disabled id="feeProtocol" placeholder="Fee Protocol" />
          </div>
          <div {..._stylex.props(_styles.$2)}>
            <Label htmlFor="unlocked">Unlocked</Label>
            <Input disabled id="unlocked" placeholder="Unlocked" />
          </div>
        </div>
      </CardContent>
      <CardFooter className={_styles.$3}>
        <Button variant="outline">Refresh</Button>
        <Link className={_styles.$4} href="#">
          More Details
        </Link>
      </CardFooter>
    </Card>;
}
const _styles = _stylex.create({
  $1: {
    display: "grid",
    gridTemplateColumns: "repeat(2, minmax(0, 1fr))",
    gap: "1rem",
    fontSize: "0.875rem",
    lineHeight: "1.25rem"
  },
  $2: {
    display: "flex",
    marginTop: "0.375rem",
    flexDirection: "column"
  },
  $3: {
    display: "flex",
    justifyContent: "space-between"
  },
  $4: {
    color: "#3B82F6"
  }
});"
`;

exports[`tailwind-to-stylex transforms portfolio.js 1`] = `
"import * as _stylex from "@stylexjs/stylex";
/**
 * v0 by Vercel.
 * @see https://v0.dev/t/u18ILcKLQhV
 */
import Link from "next/link";
import { CardHeader, CardFooter, Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
export default function Component() {
  return <section {..._stylex.props(_styles.$1)}>
      <header {..._stylex.props(_styles.$2)}>
        <Link className={_styles.$3} href="#">
          <IconMountain className={_styles.$4} />
          <span {..._stylex.props(_styles.$5)}>Portfolio</span>
        </Link>
        <nav {..._stylex.props(_styles.$6)}>
          <Link className={_styles.$7} href="#">
            About
          </Link>
          <Link className={_styles.$7} href="#">
            Education
          </Link>
          <Link className={_styles.$7} href="#">
            Projects
          </Link>
          <Link className={_styles.$7} href="#">
            Contact
          </Link>
        </nav>
      </header>
      <div {..._stylex.props(_styles.$8)}>
        <div {..._stylex.props(_styles.$9)}>
          <h1 {..._stylex.props(_styles.$10)}>
            Welcome to My Portfolio
          </h1>
          <p {..._stylex.props(_styles.$11)}>
            A high school student aspiring to innovate and create.
          </p>
          <Link className={_styles.$12} href="#">
            Contact Me
          </Link>
        </div>
      </div>
      <div {..._stylex.props(_styles.$13)} id="about">
        <h2 {..._stylex.props(_styles.$14)}>
          About Me
        </h2>
        <p {..._stylex.props(_styles.$11)}>
          I am a high school student passionate about technology and problem
          solving. I enjoy coding, robotics, and exploring new technologies.
        </p>
      </div>
      <div {..._stylex.props(_styles.$13)} id="education">
        <h2 {..._stylex.props(_styles.$14)}>
          Education
        </h2>
        <p {..._stylex.props(_styles.$11)}>
          I am currently attending XYZ High School with an expected graduation
          year of 2025.
        </p>
      </div>
      <div {..._stylex.props(_styles.$15)} id="projects">
        <Card>
          <CardHeader style={[_styles.$16]}>
            <h3 {..._stylex.props(_styles.$17)}>Project 1</h3>
          </CardHeader>
          <div>
            <p {..._stylex.props(_styles.$18)}>
              This is a brief description of my project. It includes details
              about the technologies I used and the problems I solved.
            </p>
          </div>
          <CardFooter>
            <Link className={_styles.$7} href="#">
              View Project
            </Link>
          </CardFooter>
        </Card>
        <Card>
          <CardHeader>
            <h3 {..._stylex.props(_styles.$17)}>Project 2</h3>
          </CardHeader>
          <div>
            <p {..._stylex.props(_styles.$18)}>
              This is a brief description of my project. It includes details
              about the technologies I used and the problems I solved.
            </p>
          </div>
          <CardFooter>
            <Link className={_styles.$7} href="#">
              View Project
            </Link>
          </CardFooter>
        </Card>
        <Card>
          <CardHeader>
            <h3 {..._stylex.props(_styles.$17)}>Project 3</h3>
          </CardHeader>
          <div>
            <p {..._stylex.props(_styles.$18)}>
              This is a brief description of my project. It includes details
              about the technologies I used and the problems I solved.
            </p>
          </div>
          <CardFooter>
            <Link className={_styles.$7} href="#">
              View Project
            </Link>
          </CardFooter>
        </Card>
      </div>
      <div {..._stylex.props(_styles.$13)} id="contact">
        <h2 {..._stylex.props(_styles.$14)}>
          Contact Me
        </h2>
        <form {..._stylex.props(_styles.$19)}>
          <div {..._stylex.props(_styles.$20)}>
            <div {..._stylex.props(_styles.$21)}>
              <label {..._stylex.props(_styles.$22)} htmlFor="grid-first-name">
                Name
              </label>
              <Input id="grid-first-name" placeholder="Name" type="text" />
            </div>
            <div {..._stylex.props(_styles.$23)}>
              <label {..._stylex.props(_styles.$22)} htmlFor="grid-last-name">
                Email
              </label>
              <Input id="grid-last-name" placeholder="Email" type="email" />
            </div>
          </div>
          <div {..._stylex.props(_styles.$20)}>
            <div {..._stylex.props(_styles.$24)}>
              <label {..._stylex.props(_styles.$22)} htmlFor="grid-password">
                Message
              </label>
              <Input id="grid-password" placeholder="Your message" type="text" />
            </div>
          </div>
          <Button type="submit">Send Message</Button>
        </form>
      </div>
    </section>;
}
function IconMountain(props) {
  return <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="m8 3 4 8 5-5 5 15H2L8 3z" />
    </svg>;
}
const _styles = _stylex.create({
  $1: {
    paddingTop: "3rem",
    paddingBottom: "3rem",
    width: "100%"
  },
  $2: {
    display: "flex",
    paddingLeft: {
      default: "1rem",
      "@media (min-width: 1024px)": "1.5rem"
    },
    paddingRight: {
      default: "1rem",
      "@media (min-width: 1024px)": "1.5rem"
    },
    alignItems: "center",
    height: "3.5rem"
  },
  $3: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  },
  $4: {
    width: "1.5rem",
    height: "1.5rem"
  },
  $5: {
    position: "absolute",
    width: "1px",
    height: "1px",
    padding: "0",
    margin: "-1px",
    overflow: "hidden",
    clip: "rect(0, 0, 0, 0)",
    whiteSpace: "nowrap",
    borderWidth: "0"
  },
  $6: {
    display: "flex",
    gap: {
      default: "1rem",
      "@media (min-width: 640px)": "1.5rem"
    }
  },
  $7: {
    fontSize: "0.875rem",
    lineHeight: "1.25rem",
    fontWeight: "500",
    textUnderlineOffset: "4px",
    textDecoration: {
      default: null,
      ":hover": "underline"
    }
  },
  $8: {
    width: "100%",
    paddingLeft: {
      default: "1rem",
      "@media (min-width: 768px)": "1.5rem"
    },
    paddingRight: {
      default: "1rem",
      "@media (min-width: 768px)": "1.5rem"
    }
  },
  $9: {
    display: "flex",
    marginTop: "1rem",
    flexDirection: "column",
    justifyContent: "center"
  },
  $10: {
    fontSize: {
      default: "1.875rem",
      "@media (min-width: 640px)": "3rem"
    },
    lineHeight: {
      default: "2.25rem",
      "@media (min-width: 640px)": "1"
    },
    fontWeight: "700",
    letterSpacing: "-0.05em"
  },
  $11: {
    color: "#6B7280",
    maxWidth: "600px",
    fontSize: {
      default: null,
      "@media (min-width: 768px)": "1.25rem"
    },
    lineHeight: {
      default: null,
      "@media (min-width: 768px)": "1.75rem"
    }
  },
  $12: {
    display: "inline-flex",
    paddingLeft: "2rem",
    paddingRight: "2rem",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: "0.375rem",
    height: "2.5rem",
    fontSize: "0.875rem",
    lineHeight: "1.25rem",
    fontWeight: "500",
    color: "#F9FAFB",
    backgroundColor: "#111827",
    transitionProperty: "color, background-color, border-color, text-decoration-color, fill, stroke",
    transitionTimingFunction: "cubic-bezier(0.4, 0, 0.2, 1)",
    transitionDuration: "300ms",
    boxShadow: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)"
  },
  $13: {
    width: "100%",
    paddingLeft: {
      default: "1rem",
      "@media (min-width: 768px)": "1.5rem"
    },
    paddingRight: {
      default: "1rem",
      "@media (min-width: 768px)": "1.5rem"
    },
    paddingTop: "3rem",
    paddingBottom: "3rem"
  },
  $14: {
    fontSize: {
      default: "1.875rem",
      "@media (min-width: 640px)": "2.25rem"
    },
    lineHeight: {
      default: "2.25rem",
      "@media (min-width: 640px)": "2.5rem"
    },
    fontWeight: "700",
    letterSpacing: "-0.05em"
  },
  $15: {
    width: "100%",
    display: "grid",
    paddingLeft: {
      default: "1rem",
      "@media (min-width: 768px)": "1.5rem"
    },
    paddingRight: {
      default: "1rem",
      "@media (min-width: 768px)": "1.5rem"
    },
    paddingTop: "3rem",
    paddingBottom: "3rem",
    gap: "1.5rem",
    gridTemplateColumns: {
      default: null,
      "@media (min-width: 640px)": "repeat(2, minmax(0, 1fr))",
      "@media (min-width: 768px)": "repeat(3, minmax(0, 1fr))"
    }
  },
  $16: {
    fontSize: "1.125rem",
    lineHeight: "1.75rem",
    fontWeight: "700",
    color: "#6B7280"
  },
  $17: {
    fontSize: "1.125rem",
    lineHeight: "1.75rem",
    fontWeight: "700"
  },
  $18: {
    fontSize: "0.875rem",
    lineHeight: "1.25rem",
    color: "#6B7280"
  },
  $19: {
    marginTop: "1.5rem",
    width: "100%",
    maxWidth: "32rem"
  },
  $20: {
    display: "flex",
    marginBottom: "1.5rem",
    marginLeft: "-0.75rem",
    marginRight: "-0.75rem",
    flexWrap: "wrap"
  },
  $21: {
    paddingLeft: "0.75rem",
    paddingRight: "0.75rem",
    marginBottom: {
      default: "1.5rem",
      "@media (min-width: 768px)": "0"
    },
    width: {
      default: "100%",
      "@media (min-width: 768px)": "50%"
    }
  },
  $22: {
    display: "block",
    marginBottom: "0.5rem",
    fontSize: "0.75rem",
    lineHeight: "1rem",
    fontWeight: "700",
    letterSpacing: "0.025em",
    color: "#374151",
    textTransform: "uppercase"
  },
  $23: {
    paddingLeft: "0.75rem",
    paddingRight: "0.75rem",
    width: {
      default: "100%",
      "@media (min-width: 768px)": "50%"
    }
  },
  $24: {
    paddingLeft: "0.75rem",
    paddingRight: "0.75rem",
    width: "100%"
  }
});"
`;

exports[`tailwind-to-stylex transforms theme-toggle.js 1`] = `
"/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

'use client';

import * as _stylex from "@stylexjs/stylex";
import * as React from 'react';
import { Moon, Sun } from 'lucide-react';
import { useTheme } from 'next-themes';
import { Button } from '@/components/ui/button';
export function ThemeToggle() {
  const {
    setTheme,
    theme
  } = useTheme();
  return <Button variant="ghost" size="icon" onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>
      <Sun className={_styles.$1} />
      <Moon className={_styles.$2} />
      <span {..._stylex.props(_styles.$3)}>Toggle theme</span>
    </Button>;
}
const _styles = _stylex.create({
  $1: {
    height: "1.5rem",
    width: "1.3rem"
  },
  $2: {
    display: "none",
    width: "1.25rem",
    height: "1.25rem"
  },
  $3: {
    position: "absolute",
    width: "1px",
    height: "1px",
    padding: "0",
    margin: "-1px",
    overflow: "hidden",
    clip: "rect(0, 0, 0, 0)",
    whiteSpace: "nowrap",
    borderWidth: "0"
  }
});"
`;

exports[`tailwind-to-stylex transforms variable-are-left-alone.js 1`] = `
"import * as stylex from "@stylexjs/stylex";
export const colors = stylex.defineVars({
  darkBlue: "#006ce9",
  lightBlue: "#18b6f6",
  lightPurple: "#ac7ff4",
  darkPurple: "#713fc2",
  dirtyBlack: "#1d2033",
  darkBackground: "#151934",
  darkText: "#ffffff"
});"
`;
